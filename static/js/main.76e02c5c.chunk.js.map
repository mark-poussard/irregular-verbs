{"version":3,"sources":["model/deserialization/DtoHelper.ts","view/components/async/Loader.tsx","view/components/async/LoadData.tsx","business/deserialization/CsvDeserializer.ts","model/verb/Verb.ts","business/verbs/DataStore.ts","business/verbs/RawVerbsData.ts","view/SeedSelector.tsx","view/VerbSection.tsx","model/verb/VerbSection.ts","model/verb/VerbGroup.ts","model/verb/VerbSections.ts","view/VerbSections.tsx","view/VerbsApp.tsx","App.tsx","index.tsx"],"names":["FieldType","Loader","props","className","style","show","leftoverProps","Object","objectWithoutProperties","cleanShow","cleanClassName","mergedStyle","assign","display","react_default","a","createElement","concat","LoadData","_useState","useState","_useState2","slicedToArray","promiseValue","setPromiseValue","promise","then","value","components_async_Loader","Fragment","children","deserialization_CsvDeserializer","deserialize","data","Promise","resolve","reject","entries","split","map","s","trim","filter","length","header","headerInit","deserializedArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","values","deserializedValue","i","push","err","return","deserialization_DtoHelper","assertField","dto","fieldName","hasOwnProperty","Error","assertOptionalField","fieldType","_this","assertType","assertFieldAndType","field","isType","NUMBER","STRING","BOOLEAN","OBJECT","ARRAY","Array","isArray","Verb","group","verbalBase","simplePast","pastParticiple","meaning","this","classCallCheck","getGroup","getVerbalBase","getSimplePast","getPastParticiple","getMeaning","toCsv","join","fromDto","DtoHelper","parseInt","verbs_DataStore","getVerbs","CsvDeserializer","dtoArray","SeedSelector","seedValue","setSeedValue","onClick","seed","isNaN","onSelect","onChange","event","target","toString","onKeyPress","which","currentTarget","blur","VerbSection","idx","verbSection","v","nbr","verbs","getNbr","sizeGroup","VerbGroup","pick","picked","rndIdx","Math","floor","random","splice","createGroup","groupVerbs","createGroups","groups","VerbSections","sections","getSections","generate","SeedRandom","global","verbSections","sectionSize","sectionSizeRemainder","sectionVerbs","localSectionSize","groupIdx","nbrToPick","apply","toConsumableArray","resetGlobal","getVerbSections","VerbSectionsModel","setVerbSections","useEffect","blob","Blob","type","FileSaver","saveAs","src_view_VerbSection","key","VerbsApp","setSeed","view_SeedSelector","view_VerbSections","App","async_LoadData","DataStore","view_VerbsApp","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.76e02c5c.chunk.js","sourcesContent":["class DtoHelper{\n\n    assertField = (dto : any, fieldName : string) => {\n        if(!dto.hasOwnProperty(fieldName)){\n            throw new Error(`Invalid dto did not have required field ${fieldName}`);\n        }\n    }\n\n    assertOptionalField = (dto : any, fieldName : string, fieldType : FieldType) => {\n        if(dto.hasOwnProperty(fieldName) && dto[fieldName] != null){\n            this.assertType(dto, fieldName, fieldType);\n        }\n    }\n\n    assertFieldAndType = (dto : any, fieldName : string, fieldType : FieldType) => {\n        this.assertField(dto, fieldName);\n        this.assertType(dto, fieldName, fieldType);\n    }\n\n    assertType = (dto : any, fieldName : string, fieldType : FieldType) => {\n        const field = dto[fieldName];\n        if(!this.isType(field, fieldType)){\n            throw new Error(`Invalid dto had field of invalid type ${fieldName} expected ${fieldType}`);\n        }\n    }\n\n    isType = (field : any, fieldType : FieldType) => {\n        switch(fieldType){\n            case FieldType.NUMBER:\n                return typeof field === \"number\";\n            case FieldType.STRING:\n                return typeof field === \"string\";\n            case FieldType.BOOLEAN:\n                return typeof field === \"boolean\";\n            case FieldType.OBJECT:\n                return typeof field === \"object\";\n            case FieldType.ARRAY:\n                return Array.isArray(field);\n        }\n    }\n}\n\nexport default new DtoHelper();\n\nexport enum FieldType{\n    STRING,\n    NUMBER,\n    BOOLEAN,\n    OBJECT,\n    ARRAY\n}","import React from 'react';\nimport './Loader.scss';\n\ninterface ILoaderProps extends React.HTMLAttributes<HTMLDivElement>{\n    show ?: boolean;\n}\n\nconst Loader : React.FunctionComponent<ILoaderProps> = props => {\n    const {className, style, show, ...leftoverProps} = props;\n    const cleanShow = (show != null)?show:true;\n    const cleanClassName = (className != null) ? className : \"\";\n    const mergedStyle = Object.assign({\n        display : (cleanShow)?\"initial\":\"none\"\n    }, style);\n    return (\n        <div className={`Loader ${cleanClassName}`} \n            style={mergedStyle}\n            {...leftoverProps}>\n                Loading ...\n        </div>\n    )\n}\nexport default Loader;","import React, { useState } from 'react';\nimport Loader from './Loader';\n\ninterface ILoadComponentProps<T>{\n    promise : Promise<T>;\n    children : (value : T) => React.ReactNode;\n}\n\nconst LoadData = <T extends unknown> (props : ILoadComponentProps<T>) => {\n    const [promiseValue, setPromiseValue] = useState<T | null>(null);\n    props.promise.then(value => {\n        setPromiseValue(value);\n    });\n    if(promiseValue == null){\n        return <Loader />\n    }\n    return (\n        <>\n            {props.children(promiseValue)}\n        </>\n    );\n}\nexport default LoadData;","const CSV_DELIMITER = \";\";\n\nclass CsvDeserializer{\n\n    deserialize = (data : string) => {\n        return new Promise<any[]>((resolve, reject) => {\n            const entries = data.split(\"\\n\").map(s => s.trim()).filter(s => s.length > 0);\n            let header : string[] = [];\n            let headerInit = false;\n            const deserializedArray = [];\n            for(const entry of entries){\n                const values = entry.split(CSV_DELIMITER).map(s => s.trim());\n                if(!headerInit){\n                    header = values;\n                    headerInit = true;\n                }\n                else{\n                    const deserializedValue : {[field : string] : string} = {};\n                    for(let i=0; i<values.length;i++){\n                        deserializedValue[header[i]] = values[i];\n                    }\n                    deserializedArray.push(deserializedValue);\n                }\n            }\n            resolve(deserializedArray);\n        });\n    }\n\n}\nexport default new CsvDeserializer();","import DtoHelper, { FieldType } from \"../deserialization/DtoHelper\";\n\nexport default class Verb{\n    private group : number;\n    private verbalBase : string;\n    private simplePast : string;\n    private pastParticiple : string;\n    private meaning : string;\n\n    constructor(group : number, verbalBase : string, simplePast : string, pastParticiple : string, meaning : string){\n        this.group = group;\n        this.verbalBase = verbalBase;\n        this.simplePast = simplePast;\n        this.pastParticiple = pastParticiple;\n        this.meaning = meaning;\n    }\n\n    getGroup = () => this.group;\n    getVerbalBase = () => this.verbalBase;\n    getSimplePast = () => this.simplePast;\n    getPastParticiple = () => this.pastParticiple;\n    getMeaning = () => this.meaning;\n\n    toCsv = () => {\n        return [this.getGroup(), \n            this.getVerbalBase(), \n            this.getSimplePast(), \n            this.getPastParticiple(), \n            this.getMeaning()]\n            .join(\";\");\n    }\n\n    static fromDto = (dto : any) => {\n        DtoHelper.assertFieldAndType(dto, \"group\", FieldType.STRING);\n        const group = parseInt(dto.group);\n\n        DtoHelper.assertFieldAndType(dto, \"verbalBase\", FieldType.STRING);\n        const verbalBase = dto.verbalBase;\n\n        DtoHelper.assertFieldAndType(dto, \"simplePast\", FieldType.STRING);\n        const simplePast = dto.simplePast;\n\n        DtoHelper.assertFieldAndType(dto, \"pastParticiple\", FieldType.STRING);\n        const pastParticiple = dto.pastParticiple;\n\n        DtoHelper.assertFieldAndType(dto, \"meaning\", FieldType.STRING);\n        const meaning = dto.meaning;\n\n        return new Verb(group, verbalBase, simplePast, pastParticiple, meaning);\n    }\n}","import CsvDeserializer from \"../deserialization/CsvDeserializer\"\nimport rawVerbsData from \"./RawVerbsData\"\nimport Verb from \"../../model/verb/Verb\"\n\nclass DataStore{\n\n    getVerbs = () => {\n        return CsvDeserializer.deserialize(rawVerbsData)\n            .then(dtoArray => dtoArray.map(Verb.fromDto));\n    }\n}\nexport default new DataStore();","const rawVerbsData = `\ngroup;verbalBase;simplePast;pastParticiple;meaning\n1;do;did;done;Faire (une action)\n1;be;was, were;been;être\n1;have;had;had;avoir\n1;go;went;gone;aller\n1;write;wrote;written;écrire\n1;win;won;won;Gagner (un prix)\n1;wear;wore;worn;Porter un vêtement, user\n1;wake;woke, waked;woken, waked;réveiller\n1;understand;understood;understood;comprendre\n1;think;thought;thought;penser\n1;tell;told;told;Raconter, dire\n1;speak;spoke;spoken;parler\n1;sleep;slept;slept;dormir\n1;sit;sat;sat;s’asseoir\n1;see;saw;seen;voir\n1;say;said;said;dire\n1;read;read;read;lire\n2;drive;drove;driven;conduire\n2;drink;drank;drunk;boire\n2;come;came;come;venir\n2;buy;bought;bought;acheter\n2;build;built;built;construire\n2;bring;brought;brought;apporter\n2;become;became;become;devenir\n2;put;put;put;mettre\n2;make;made;made;Faire (création)\n2;lose;lost;lost;perdre\n2;leave;left;left;Laisser, quitter\n2;learn;learnt, learned;learnt, learned;Apprendre qqchose\n2;know;knew;known;Savoir, connaître\n2;hold;held;held;tenir\n2;hear;heard;heard;entendre\n2;grow;grew;grown;Grandir, cultiver\n2;give;gave;given;donner\n2;get;got;got, gotten;obtenir\n2;fall;fell;fallen;tomber\n2;eat;ate;eaten;manger\n2;teach;taught;taught;enseigner\n2;take;took;taken;prendre\n2;swim;swam;swum;nager\n2;stand;stood;stood;Se tenir\n2;smell;smelt, smelled;smelt, smelled;Sentir (odeur)\n2;shut;shut;shut;fermer\n2;show;showed;shown, showed;montrer\n2;sell;sold;sold;vendre\n2;run;ran;run;courir\n3;forbid;forbad, forbade;forbid, forbidden;interdire\n3;fly;flew;flown;Voler (oiseau / avion)\n3;spell;spelt, spelled;spelt, spelled;épeler\n3;dream;dreamt, dreamed;dreamt, dreamed;rêver\n3;draw;drew;drawn;Tirer, dessiner\n3;dig;dug;dug;creuser\n3;cut;cut;cut;couper\n3;cost;cost;cost;coûter\n3;choose;chose;chosen;choisir\n3;catch;caught;caught;attraper\n3;burn;burnt, burned;burnt, burned;brûler\n3;broadcast;broadcast, broadcasted;broadcast, broadcasted;Émettre, publier\n3;break;broke;broken;casser\n3;bite;bit;bitten;mordre\n3;begin;began;begun;commencer\n3;beat;beat;beaten, beat;battre\n3;bear;bore;borne, born;(sup)porter\n3;pay;paid;paid;payer\n3;meet;met;met;rencontrer\n3;mean;meant;meant;signifier\n3;light;lit;lit;allumer\n3;lie;lay;lain;s'allonger\n3;let;let;let;Laisser faire\n3;keep;kept;kept;Garder, conserver\n3;hurt;hurt;hurt;Blesser, faire mal\n3;hit;hit;hit;frapper\n3;hide;hid;hidden, hid;cacher\n3;forget;forgot;forgotten;oublier\n3;find;found;found;trouver\n3;fight;fought;fought;combattre\n3;feel;felt;felt;(res)sentir\n3;throw;threw;thrown;Lancer, jeter\n3;tear;tore;torn;déchirer\n3;swing;swung;swung;(se) balancer\n3;stick;stuck;stuck;coller\n3;steal;stole;stolen;Voler (s'approprier)\n3;spread;spread;spread;(s')étaler\n3;spend;spent;spent;Passer / dépenser\n3;sing;sang;sung;chanter\n3;shoot;shot;shot;Tirer sur (arme à feu)\n3;shine;shone;shone;briller\n3;send;sent;sent;envoyer\n3;rise;rose;risen;Se lever\n3;ride;rode;ridden;Monter à cheval /vélo\n4;deal;dealt;dealt;Distribuer\n4;creep;crept;crept;ramper\n4;clothe;clothed, clad;clothed, clad;habiller\n4;breed;bred;bred;Élever, se reproduire\n4;blow;blew;blown;souffler\n4;bleed;bled;bled;saigner\n4;bid;bade, bid;bidden, bid, bade;Enchérir, souhaiter\n4;bet;bet, betted;bet, betted;parier\n4;bend;bent;bent;plier\n4;awake;awoke;awoken;Se réveiller\n4;arise;arose;arisen;Se lever\n4;melt;melted;molten, melted;fondre\n4;lend;lent;lent;prêter\n4;lean;leant, leaned;leant, leaned;(se) pencher\n4;lead;led;led;mener\n4;lay;laid;laid;Poser (à plat)\n4;kneel;knelt, kneeled;knelt, kneeled;s'agenouiller\n4;hang;hung;hung;(sus)pendre\n4;grind;ground;ground;moudre\n4;freeze;froze;frozen;geler\n4;feed;fed;fed;nourrir\n4;wet;wet, wetted;wet, wetted;mouiller\n4;swell;swelled;swollen, swelled;Gonfler / enfler\n4;sweep;swept;swept;balayer\n4;sweat;sweat, sweated;sweat, sweated;Suer, transpirer\n4;swear;swore;sworn;jurer\n4;string;strung;strung;enfiler\n4;strike;struck;struck;frapper\n4;stride;strode;stridden;Marcher à grands pas\n4;sting;stung;stung;piquer\n4;spoil;spoilt, spoiled;spoilt, spoiled;gâcher / gâter\n4;split;split;split;Écarter, séparer\n4;spit;spat;spat;cracher\n4;spin;spun;spun;Tourner, filer (laine)\n4;spill;spilt, spilled;spilt, spilled;Déverser (liquide)\n4;slide;slid;slid;glisser\n4;sink;sank;sunk;sombrer\n4;shoe;shod, shoed;shod, shoed;chausser\n4;shake;shook;shaken;Secouer (serrer la main)\n4;ring;rang;rung;sonner\n4;rid;rid;rid;débarrasser de\n4;quit;quit;quit;Abandonner, arrêter\n4;spring;sprang, sprung;sprung;jaillir\n5;dwell;dwelt, dwelled;dwelt, dwelled;habiter\n5;cling;clung;clung;s'agripper\n5;cleave;cleft;cleft, cloven;fendre\n5;cast;cast;cast;jeter\n5;burst;burst;burst;éclater\n5;bless;blessed, blest;blessed, blest;bénir\n5;bind;bound;bound;lier\n5;prove;proved;proven, proved;prouver\n5;plead;pled;pled;plaider\n5;mow;mowed;mown, mowed;tondre\n5;leap;leapt, leaped;leapt, leaped;sauter\n5;knit;knitted, knit;knitted, knit;tricoter\n5;hew;hewed;hewed, hewn;couper, tailler (ex. bois)\n5;forsake;forsook;forsaken;abandonner\n5;forecast;forecast, forecasted;forecast, forecasted;prédire\n5;fling;flung;flung;lancer\n5;flee;fled;fled;s'enfuir\n5;wring;wrung;wrung;essorer\n5;wind;wound;wound;enrouler\n5;weep;wept;wept;pleurer\n5;wed;wed, wedded;wed, wedded;Épouser, se marier\n5;weave;wove;woven;tisser\n5;tread;trod;trodden;Marcher, fouler\n5;thrust;thrust;thrust;Pousser, enfoncer\n5;strive;strove;striven;S'efforcer à faire qqch\n5;stink;stank, stunk;stunk;puer\n5;speed;sped, speeded;sped, speeded;Aller (trop) vite\n5;sow;sowed;sown, sowed;semer\n5;smite;smote;smitten;frapper\n5;slit;slit;slit;Fendre avec une lame\n5;slink;slunk;slunk;Aller furtivement\n5;sling;slung;slung;lancer\n5;slay;slew;slain;abattre\n5;shrink;shrank, shrunk;shrunk;rétrécir\n5;shred;shred, shredded;shred, shredded;déchiqueter\n5;shed;shed;shed;Déverser, perdre\n5;shear;sheared;shorn, sheared;Tondre ( un mouton)\n5;sew;sewed;sewn, sewed;coudre\n5;set;set;set;Fixer, poser, installer\n5;seek;sought;sought;chercher\n5;saw;sawed;sawn;scier\n`;\n\nexport default rawVerbsData;","import React, { useState } from 'react';\n\ninterface ISeedSelectorProps{\n    onSelect : (seed : number) => void;\n}\n\nconst SeedSelector : React.FunctionComponent<ISeedSelectorProps> = props => {\n    const [seedValue, setSeedValue] = useState(\"\");\n    const onChange = (event : React.ChangeEvent<HTMLInputElement>) => {\n        const seed = parseInt(event.target.value);\n        if(!isNaN(seed)){\n            setSeedValue(seed.toString());\n        }\n    }\n    const onClick = () => {\n        const seed = parseInt(seedValue);\n        if(!isNaN(seed)){\n            props.onSelect(seed);\n        }\n    }\n    const onKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.which === 13) {\n            event.currentTarget.blur();\n            onClick();\n        }\n    }\n    return (\n        <div>\n            <input onChange={onChange} onKeyPress={onKeyPress} value={seedValue}/>\n            <button onClick={onClick}>Select seed</button>\n        </div>\n    );\n}\nexport default SeedSelector;","import React from 'react';\nimport VerbSectionModel from '../model/verb/VerbSection';\nimport './VerbSection.scss';\n\ninterface IVerbSectionProps{\n    verbSection : VerbSectionModel;\n    idx : number;\n}\n\nconst VerbSection : React.FunctionComponent<IVerbSectionProps> = props => {\n    return (\n        <div className={`VerbSection`}>\n            <h4>Verb section {props.idx+1} (verbs count : {props.verbSection.getVerbs().length})</h4>\n            <p>{props.verbSection.getVerbs().map(v => `[${v.getGroup()}]` + v.getVerbalBase()).join(\", \")}</p>\n        </div>\n    )\n}\nexport default VerbSection;","import Verb from \"./Verb\";\nimport SeedRandom from \"seed-random\";\nimport VerbGroup, { MAX_GROUP } from \"./VerbGroup\";\n\nexport const NBR_SECTIONS = 10;\n\nexport default class VerbSection{\n    private nbr : number;\n    private verbs : Verb[];\n\n    constructor(nbr : number, verbs : Verb[]){\n        this.nbr = nbr;\n        this.verbs = verbs;\n    }\n\n    getVerbs = () => this.verbs;\n    getNbr = () => this.nbr;\n    sizeGroup = (group : number) => this.verbs.filter(v => v.getGroup() === group).length;\n\n    toCsv = () => {\n        return `Section ${this.nbr}\\n` +  this.verbs.map(v => v.toCsv()).join(\"\\n\");\n    }\n}","import Verb from './Verb';\n\nexport const MAX_GROUP = 5;\n\nexport default class VerbGroup{\n    private group : number;\n    private verbs : Verb[];\n\n    constructor(group : number, verbs : Verb[]){\n        this.group = group;\n        this.verbs = verbs;\n    }\n\n    getGroup = () => this.group;\n    getVerbs = () => this.verbs;\n\n    pick = (nbr : number) => {\n        const picked : Verb[] = [];\n        for(let i=0; i<nbr; i++){\n            if(this.verbs.length === 0) break;\n            const rndIdx = Math.floor(Math.random() * this.verbs.length);\n            picked.push(this.verbs[rndIdx]);\n            this.verbs.splice(rndIdx, 1);\n        }\n        return picked;\n    }\n\n    static createGroup = (group : number, verbs : Verb[]) => {\n        const groupVerbs = verbs.filter(v => v.getGroup() === group);\n        return new VerbGroup(group, groupVerbs);\n    }\n\n    static createGroups = (verbs : Verb[]) => {\n        const groups : VerbGroup[] = []\n        for(let i=0; i<MAX_GROUP; i++){\n            groups.push(VerbGroup.createGroup(i+1, verbs));\n        }\n        return groups;\n    }\n}","import VerbSection, { NBR_SECTIONS } from \"./VerbSection\";\nimport SeedRandom from \"seed-random\";\nimport VerbGroup, { MAX_GROUP } from \"./VerbGroup\";\nimport Verb from \"./Verb\";\n\nexport default class VerbSections{\n    private sections : VerbSection[];\n\n    constructor(sections : VerbSection[]){\n        this.sections = sections;\n    }\n\n    getSections = () => this.sections;\n\n    toCsv = () => {\n        return this.sections.map(s => s.toCsv()).join(\"\\n\");\n    }\n\n    static generate = (verbs : Verb[], seed : number) => {\n        SeedRandom(seed.toString(), {global: true});\n        const verbSections : VerbSection[] = [];\n        const groups = VerbGroup.createGroups(verbs);\n        const sectionSize = Math.floor(verbs.length / NBR_SECTIONS); // Remainder ?\n        let sectionSizeRemainder = verbs.length % NBR_SECTIONS;\n        for(let i=0; i<NBR_SECTIONS; i++){\n            const sectionVerbs : Verb[] = [];\n            const localSectionSize = (sectionSizeRemainder-- > 0)\n                ? sectionSize + 1\n                : sectionSize;\n            let groupIdx = 0;\n            const basePickAllowance = 3;\n            while(sectionVerbs.length < localSectionSize){\n                if(groupIdx >= MAX_GROUP) groupIdx=0;\n                const nbrToPick = ((sectionVerbs.length + basePickAllowance) >= localSectionSize)\n                    ? (localSectionSize-sectionVerbs.length)\n                    : basePickAllowance;\n                const picked = groups[groupIdx].pick(nbrToPick);\n                sectionVerbs.push(...picked);\n                groupIdx ++;\n            }\n            verbSections.push(new VerbSection(i+1, sectionVerbs));\n        }\n        SeedRandom.resetGlobal();\n        return new VerbSections(verbSections);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport Verb from '../model/verb/Verb';\nimport VerbSectionModel from '../model/verb/VerbSection';\nimport VerbSection from './VerbSection';\nimport VerbSectionsModel from '../model/verb/VerbSections';\nimport FileSaver from 'file-saver';\n\ninterface IVerbSectionsProps{\n    verbs : Verb[]\n    seed : number;\n}\n\nconst VerbSections : React.FunctionComponent<IVerbSectionsProps> = props => {\n    const getVerbSections = () => VerbSectionsModel.generate(props.verbs, props.seed);\n    const [verbSections, setVerbSections] = useState(getVerbSections());\n    useEffect(() => {\n        setVerbSections(getVerbSections());\n    }, [props]);\n    const doDownloadAllSections = () => {\n        const blob = new Blob([verbSections.toCsv()], {type: \"text/csv;charset=utf-8\"});\n        FileSaver.saveAs(blob, \"AllSections.csv\");\n    }\n    return (\n        <div>\n            <button onClick={doDownloadAllSections}>Download all sections</button>\n            {verbSections.getSections().map((verbSection, idx) => \n                <VerbSection key={idx} verbSection={verbSection} idx={idx}/>\n            )}\n        </div>\n    );\n}\nexport default VerbSections;","import React, { useState } from 'react';\nimport Verb from '../model/verb/Verb';\nimport SeedSelector from './SeedSelector';\nimport VerbSections from './VerbSections';\n\ninterface IVerbsAppProps{\n    verbs : Verb[];\n}\n\nconst VerbsApp : React.FunctionComponent<IVerbsAppProps> = props => {\n    const [seed, setSeed] = useState<number | null>(null);\n    return (\n        <div>\n            <SeedSelector onSelect={setSeed} />\n            {seed != null &&\n                <VerbSections verbs={props.verbs} seed={seed} />\n            }\n        </div>\n    )\n}\nexport default VerbsApp;","import React from 'react';\nimport LoadData from './view/components/async/LoadData';\nimport './App.scss';\nimport DataStore from './business/verbs/DataStore';\nimport VerbsApp from './view/VerbsApp';\n\nconst App : React.FunctionComponent = props => {\n  return (\n    <div className={`App`}>\n      <LoadData promise={DataStore.getVerbs()}>\n        {verbs => (\n          <VerbsApp verbs={verbs}/>\n        )}\n      </LoadData>\n    </div>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}